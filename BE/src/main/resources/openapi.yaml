openapi: 3.0.3
info:
  title: User API
  description: API for user management operations including registration, login, user information retrieval, bank accounts, and operations
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: http://localhost:8081/moneydashboard/api/v1/
    description: Docker server

components:
  schemas:
    BaseResponse:
      type: object
      required:
        - status_code
        - message
      properties:
        status_code:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Descriptive response message

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'

    UserDTO:
      type: object
      required: [first_name, last_name, email]
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string

    UpdateUserDTO:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string

    LoginDTO:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string

    InsertUserDTO:
      type: object
      required: [first_name, last_name, email, confirm_email, password]
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        confirm_email:
          type: string
        password:
          type: string
        bank_accounts:
          type: array
          items:
            $ref: '#/components/schemas/InsertBankAccountDTO'

    UpdateOperationDTO:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/OperationCategory'
        amount:
          type: number
        description:
          type: string
        date:
          type: string
          format: date

    OperationDTO:
      type: object
      required: [uuid, category, amount, date]
      properties:
        uuid:
          type: string
          format: uuid
        category:
          $ref: '#/components/schemas/OperationCategory'
        amount:
          type: number
        description:
          type: string
        date:
          type: string
          format: date

    InsertOperationDTO:
      type: object
      required: [category, amount, date]
      properties:
        category:
          $ref: '#/components/schemas/OperationCategory'
        amount:
          type: number
        description:
          type: string
        date:
          type: string
          format: date

    UpdateBankAccountDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: '#/components/schemas/BankAccountType'
        amount:
          type: number

    InsertBankAccountDTO:
      type: object
      required: [name, type, amount]
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/BankAccountType'
        amount:
          type: number

    BankAccountDTO:
      type: object
      required: [uuid, name, type, amount]
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: '#/components/schemas/BankAccountType'
        amount:
          type: number

    OperationCategory:
      type: string
      enum: [INCOMING, OUTCOMING]

    BankAccountType:
      type: string
      enum: [CASH, DIGITAL]

    SuccessResponseString:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              type: string
              nullable: true
              description: Result content

    SuccessResponseUserDTO:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              $ref: '#/components/schemas/UserDTO'

    SuccessResponseUUID:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              type: string
              format: uuid
              description: UUID result

    SuccessResponseUnit:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              nullable: true
              description: No content

    SuccessResponseUserList:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/UserDTO'

    SuccessResponseBankAccountDTO:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              $ref: '#/components/schemas/BankAccountDTO'

    SuccessResponseBankAccountList:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/BankAccountDTO'

    SuccessResponseOperationDTO:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              $ref: '#/components/schemas/OperationDTO'

    SuccessResponseOperationList:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/OperationDTO'

    SuccessResponsePaginatedOperations:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - content
          properties:
            content:
              $ref: '#/components/schemas/PaginationDTO'

    PaginationDTO:
      type: object
      required:
        - items
        - totalPages
        - totalElements
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OperationDTO'
        totalPages:
          type: integer
        totalElements:
          type: integer

securitySchemes:
  UuidAuth:
    type: apiKey
    in: header
    name: uuid
    description: UUID-based authentication

security:
  - UuidAuth: []

tags:
  - name: Users
    description: User management operations
  - name: Bank Accounts
    description: Bank account management operations
  - name: Operations
    description: Financial operation management

paths:
  /users/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertUserDTO'
      responses:
        '200':
          description: Register succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUUID'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/login:
    post:
      tags: [Users]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
      responses:
        '200':
          description: Login succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUUID'
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags: [Users]
      summary: Get user info
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUserDTO'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Users]
      summary: Delete user
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUnit'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Users]
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDTO'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUserDTO'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bank-accounts:
    post:
      tags: [Bank Accounts]
      summary: Create new bank account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertBankAccountDTO'
      responses:
        '200':
          description: Insert succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUUID'
    get:
      tags: [Bank Accounts]
      summary: Get all bank accounts for user
      responses:
        '200':
          description: Bank accounts found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseBankAccountList'
    put:
      tags: [Bank Accounts]
      summary: Bulk update bank accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBankAccountDTO'
      responses:
        '200':
          description: Update succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseBankAccountList'

  /bank-accounts/{uuid}:
    delete:
      tags: [Bank Accounts]
      summary: Delete a bank account
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Bank account deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUnit'
    put:
      tags: [Bank Accounts]
      summary: Update a bank account
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBankAccountDTO'
      responses:
        '200':
          description: Bank account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseBankAccountDTO'

  /operations/bank-account/{bankAccountUuid}:
    post:
      tags: [Operations]
      summary: Add a new operation to a bank account
      parameters:
        - in: path
          name: bankAccountUuid
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertOperationDTO'
      responses:
        '200':
          description: Insert operation succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUUID'
    get:
      tags: [Operations]
      summary: Get paginated operations for a bank account
      parameters:
        - in: path
          name: bankAccountUuid
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: pageNumber
          required: false
          schema:
            type: integer
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Operations fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponsePaginatedOperations'

  /operations/{uuid}/bank-account/{bankAccountUuid}:
    get:
      tags: [Operations]
      summary: Get operation by UUID
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: bankAccountUuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Operation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseOperationDTO'
    put:
      tags: [Operations]
      summary: Update operation by UUID
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: bankAccountUuid
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOperationDTO'
      responses:
        '200':
          description: Operation updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseOperationDTO'
    delete:
      tags: [Operations]
      summary: Delete operation by UUID
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: bankAccountUuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Operation deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUnit'
